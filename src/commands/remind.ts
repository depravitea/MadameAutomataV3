import { SlashCommandBuilder } from 'discord.js'; import { prisma } from '../lib/db.js'; import dayjs from 'dayjs'; export const data=new SlashCommandBuilder().setName('remind').setDescription('Set reminders').addSubcommand(s=>s.setName('add').setDescription('Add').addStringOption(o=>o.setName('content').setDescription('What to remind').setRequired(true)).addIntegerOption(o=>o.setName('minutes').setDescription('Minutes from now').setRequired(true))).addSubcommand(s=>s.setName('list').setDescription('List')).addSubcommand(s=>s.setName('remove').setDescription('Remove').addStringOption(o=>o.setName('id').setDescription('Reminder ID').setRequired(true))); export async function execute(i){ const sub=i.options.getSubcommand(); if(sub==='add'){ const content=i.options.getString('content',true); const minutes=i.options.getInteger('minutes',true); const runAt=dayjs().add(minutes,'minute').toDate(); const r=await prisma.reminder.create({ data:{ guildId:i.guildId!, userId:i.user.id, content, runAt } }); await i.reply({ content:`Reminder **${r.id}** set for <t:${Math.floor(runAt.getTime()/1000)}:R>.`}); } else if(sub==='list'){ const rs=await prisma.reminder.findMany({ where:{ guildId:i.guildId!, userId:i.user.id } }); await i.reply({ content: rs.map(r=>`• **${r.id}** — ${r.content} at <t:${Math.floor(r.runAt.getTime()/1000)}:f>`).join('\n') || 'No reminders.'}); } else { const id=i.options.getString('id',true); await prisma.reminder.delete({ where:{ id } }); await i.reply({ content:`Reminder **${id}** removed.`}); } }
