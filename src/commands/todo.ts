import { SlashCommandBuilder } from 'discord.js'; import { prisma } from '../lib/db.js'; export const data=new SlashCommandBuilder().setName('todo').setDescription('Personal to-do list').addSubcommand(s=>s.setName('add').setDescription('Add').addStringOption(o=>o.setName('title').setDescription('Title').setRequired(true)).addBooleanOption(o=>o.setName('private').setDescription('Private?'))).addSubcommand(s=>s.setName('list').setDescription('List')).addSubcommand(s=>s.setName('done').setDescription('Done').addStringOption(o=>o.setName('id').setDescription('ID').setRequired(true))); export async function execute(i){ const sub=i.options.getSubcommand(); if(sub==='add'){ const title=i.options.getString('title',true); const priv=i.options.getBoolean('private')||false; const t=await prisma.task.create({ data:{ guildId:i.guildId!, assignee:i.user.id, assigner:i.user.id, title, dueAt:null } }); await i.reply({ content:`To-do **${t.id}**: ${title}${priv?' (private—use /log for private logs)':''}`}); } else if(sub==='list'){ const tasks=await prisma.task.findMany({ where:{ guildId:i.guildId!, assignee:i.user.id, doneAt:null } }); const lines=tasks.map(t=>`• **${t.id}** — ${t.title}`); await i.reply({ content: lines.join('\n') || 'No open to-dos.'}); } else { const id=i.options.getString('id',true); await prisma.task.update({ where:{ id }, data:{ doneAt:new Date() } }); await i.reply({ content:`To-do **${id}** completed.`}); } }
