import { SlashCommandBuilder } from 'discord.js'; import { prisma } from '../lib/db.js'; export const data=new SlashCommandBuilder().setName('contract').setDescription('Contract management').addSubcommand(s=>s.setName('create').setDescription('Create').addUserOption(o=>o.setName('dom').setDescription('Dominant').setRequired(true)).addUserOption(o=>o.setName('sub').setDescription('Submissive').setRequired(true)).addStringOption(o=>o.setName('terms').setDescription('Terms').setRequired(true))).addSubcommand(s=>s.setName('accept').setDescription('Accept').addStringOption(o=>o.setName('contract_id').setDescription('ID').setRequired(true))).addSubcommand(s=>s.setName('revoke').setDescription('Revoke').addStringOption(o=>o.setName('contract_id').setDescription('ID').setRequired(true))); export async function execute(i){ const sub=i.options.getSubcommand(); if(sub==='create'){ const dom=i.options.getUser('dom',true); const subU=i.options.getUser('sub',true); const terms=i.options.getString('terms',true); const c=await prisma.contract.create({ data:{ guildId:i.guildId!, domId:dom.id, subId:subU.id, terms, status:'pending' } }); await i.reply({ content:`Contract **${c.id}** drafted between ${dom} and ${subU}.`}); } else if(sub==='accept'){ const id=i.options.getString('contract_id',true); await prisma.contract.update({ where:{ id }, data:{ status:'active' } }); await i.reply({ content:`Contract **${id}** accepted.`}); } else { const id=i.options.getString('contract_id',true); await prisma.contract.update({ where:{ id }, data:{ status:'revoked' } }); await i.reply({ content:`Contract **${id}** revoked.`}); } }
