import { SlashCommandBuilder } from 'discord.js'; import { prisma } from '../lib/db.js'; import dayjs from 'dayjs'; export const data=new SlashCommandBuilder().setName('task').setDescription('Assign and track tasks').addSubcommand(s=>s.setName('assign').setDescription('Assign').addUserOption(o=>o.setName('user').setDescription('Assignee').setRequired(true)).addStringOption(o=>o.setName('title').setDescription('Task').setRequired(true)).addStringOption(o=>o.setName('due').setDescription('Due in minutes'))).addSubcommand(s=>s.setName('list').setDescription('List')).addSubcommand(s=>s.setName('done').setDescription('Done').addStringOption(o=>o.setName('id').setDescription('Task ID').setRequired(true))); export async function execute(i){ const sub=i.options.getSubcommand(); if(sub==='assign'){ const user=i.options.getUser('user',true); const title=i.options.getString('title',true); const dueStr=i.options.getString('due'); const dueAt=dueStr? dayjs().add(parseInt(dueStr,10),'minute').toDate(): null; const t=await prisma.task.create({ data:{ guildId:i.guildId!, assignee:user.id, assigner:i.user.id, title, dueAt } }); await i.reply({ content:`Task **${t.title}** assigned to ${user}${dueAt?`, due <t:${Math.floor(dueAt.getTime()/1000)}:R>`:''}.`}); } else if(sub==='list'){ const tasks=await prisma.task.findMany({ where:{ guildId:i.guildId!, doneAt:null } }); const lines=tasks.map(t=>`• **${t.id}** — ${t.title} (for <@${t.assignee}>) ${t.dueAt?`— due <t:${Math.floor(t.dueAt.getTime()/1000)}:R>`:''}`); await i.reply({ content: lines.join('\n') || 'No open tasks.'}); } else { const id=i.options.getString('id',true); await prisma.task.update({ where:{ id }, data:{ doneAt:new Date() } }); await i.reply({ content:`Task **${id}** marked complete.`}); } }
