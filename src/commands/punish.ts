import { SlashCommandBuilder, PermissionFlagsBits, time } from 'discord.js'; import { prisma } from '../lib/db.js'; export const data=new SlashCommandBuilder().setName('punish').setDescription('Apply a punishment').addUserOption(o=>o.setName('target').setDescription('User').setRequired(true)).addStringOption(o=>o.setName('kind').setDescription('timeout | blindfold | mark').setRequired(true)).addIntegerOption(o=>o.setName('minutes').setDescription('Duration')).addStringOption(o=>o.setName('reason').setDescription('Reason')).setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers); export async function execute(i){ const t=i.options.getUser('target',true); const kind=i.options.getString('kind',true); const minutes=i.options.getInteger('minutes')||10; const reason=i.options.getString('reason')||'discipline'; if(kind==='timeout'){ const m=await i.guild.members.fetch(t.id); const ms=minutes*60*1000; await m.timeout(ms,reason); await prisma.punishment.create({ data:{ guildId:i.guildId!, targetId:t.id, kind, reason, expiresAt:new Date(Date.now()+ms), createdBy:i.user.id } }); await i.reply({ content:`Silence descends upon ${t} for ${minutes}m.`}); return;} await prisma.punishment.create({ data:{ guildId:i.guildId!, targetId:t.id, kind, reason, createdBy:i.user.id } }); await i.reply({ content:`Noted **${kind}** for ${t}.`}); }
